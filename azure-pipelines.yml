# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  name: Qinxiu-Local

stages:
- stage: Pre_Commit
  displayName: Pre Commit
  pool: Azure Pipelines
  jobs:
  - job: Unit_test
    displayName:  Unit_test
    steps:
      - task: Maven@3
        displayName: 'Maven test execution'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: test

  - job: Linter_Check
    displayName:  Linter_Check
    steps:
      - task: Maven@3
        displayName: 'Maven Linter check execution'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: checkstyle:check

  - job: Secret_Scan
    displayName: Secret Scan Job
    pool:
      name: Qinxiu-Local
    steps:
    - script: |
        output=$(docker run -t -v $(Build.SourcesDirectory):/src trufflesecurity/trufflehog --json --filesystem /src)
        # echo "$output" 
        if echo "$output" | grep -q '"verified_secrets": [^0]\|"unverified_secrets": [^0]'; then
          echo "Secrets found, failing the build"
          exit 1
        else
          echo "No secrets found, proceeding with the build"
        fi
      displayName: 'Run TruffleHog Secret Scanner'
      failOnStderr: false
      
- stage: Vulnerability_scan
  dependsOn: Pre_Commit
  displayName: Vulnerability scan
  pool: Azure Pipelines
  jobs:
  - job: SAST
    displayName:  SAST
    steps:
    - task: Maven@3
      displayName: 'Maven spotbugs check execution'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: spotbugs:check
  - job: Dependency_checker
    displayName:  Dependency checker
    steps:
    - task: Maven@3
      displayName: 'dependecy check execution'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: org.owasp:dependency-check-maven:check

- stage: SCA
  dependsOn: Vulnerability_scan
  displayName: SCA
  pool: Azure Pipelines
  jobs:
  - job: SCA_job
    displayName:  cyclonedx execution
    steps:
    - task: Maven@3
      displayName: 'Maven cyclonedx check execution'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: org.cyclonedx:cyclonedx-maven-plugin:makeBom 

- stage: Container_Image_Build
  dependsOn: SCA
  displayName: Container Image Build
  jobs:
  - job: Build
    displayName:  'Image build'
    steps:
    - script: 'docker build -t lab-app:$(Build.BuildId) . '
      displayName: 'Command Line Script'

- stage: Container_Image_Scan
  dependsOn: Container_Image_Build
  displayName: Container Image Scan
  jobs:
  - job: Scan
    displayName:  'Image Scan'
    steps:
    - script: 'grype lab-app:$(Build.BuildId) -o json > grype-results-$(Build.BuildId).json'
      displayName: 'Run Grype Scan'

    - script: |
        cat grype-results-$(Build.BuildId).json
      displayName: 'Print Entire Grype Results JSON'

    - script: |
        critical_count=$(jq '[.matches[] | select(.vulnerability.severity == "Critical")] | length' grype-results-$(Build.BuildId).json)
        high_count=$(jq '[.matches[] | select(.vulnerability.severity == "High")] | length' grype-results-$(Build.BuildId).json)
        echo "Number of critical vulnerabilities: $critical_count"
        echo "Number of high vulnerabilities: $high_count"
        
        if [ "$critical_count" -gt 20 ]; then
          echo "Error: Number of critical vulnerabilities ($critical_count) exceeds the threshold."
          exit 1
        fi
      displayName: 'Count Critical Vulnerabilities'

- stage: Image_Hardening
  dependsOn: Container_Image_Scan
  displayName: Image Hardening
  jobs:
  - job: Scan
    displayName:  'Image hardening'
    steps:
    - script: |
        dockle --format json lab-app:$(Build.BuildId) > dockle-results-$(Build.BuildId).json
      displayName: 'Run Dockle Scan'
    - script: |
        warn_count=$(jq '[.details[] | select(.level == "WARN")] | length' dockle-results-$(Build.BuildId).json)
        fatal_count=$(jq '[.details[] | select(.level == "FATAL")] | length' dockle-results-$(Build.BuildId).json)
        echo "Number of WARN issues: $warn_count"
        echo "Number of FATAL issues: $fatal_count"
      displayName: 'Count WARN and FATAL Issues'
    - script: |
        cat dockle-results-$(Build.BuildId).json
      displayName: 'Print Entire Dockle Results JSON'
    - script: |
        fatal_count=$(jq '[.details[] | select(.level == "FATAL")] | length' dockle-results-$(Build.BuildId).json)
        if [ "$fatal_count" -gt 0 ]; then
          echo "Error: There are $fatal_count FATAL issues."
          exit 1
        fi
      displayName: 'Fail on FATAL Issues'

- stage: Image_Push
  dependsOn: Image_Hardening
  displayName: Image Push
  pool: Azure Pipelines
  jobs:
  - job: Push
    displayName:  'Image Push'
    steps:
    - task: Docker@2
      displayName: push
      inputs:
        containerRegistry: 'docker-registry-bcn'
        repository: 'lab-app'
        tags: '$(Build.BuildId)'

- stage: Stage_Env_Deploy
  dependsOn: Image_Push
  displayName: Stage Deployment
  jobs:
  - job: Deploy
    displayName:  'Stage Deploy'
    steps:
    - script: 'echo deploy'
      displayName: 'Command Line Script'
      
- stage: DAST
  dependsOn: Stage_Env_Deploy
  displayName: 'Dynamic Application Security Testing (DAST)'
  jobs:
  - job: OWASP_ZAP_Scan
    displayName: 'OWASP ZAP Scan'
    steps:
    - script: |
        echo "Pulling the latest ZAP stable image..."
        docker pull zaproxy/zap-stable:latest
      displayName: 'Pull ZAP Docker Image'

    - script: |
        echo "Running OWASP ZAP DAST scan on $(url_to_scan)..."
        output=$(docker run --rm -v $(Build.SourcesDirectory)/zap_reports:/zap/wrk:rw \
          zaproxy/zap-stable:latest zap-baseline.py -t $(url_to_scan) -r zap_report_$(Build.BuildId).html)
        echo "Scan completed. Output captured in the variable."
        echo "$output"
      displayName: 'Run OWASP ZAP DAST Scan and Capture Output'

    - script: |
        echo "Analyzing captured output for High risk vulnerabilities..."
        if echo "$output" | grep -q "High"; then
          echo "Error: High vulnerabilities detected in the output."
          exit 1
        else
          echo "No High vulnerabilities detected in the output. Proceeding..."
        fi
      displayName: 'Analyze Captured Output'



- stage: Prod_Deploy
  dependsOn: DAST
  displayName: Stage Deployment
  jobs:
  - job: Deploy
    displayName:  'Stage Deploy'
    steps:
    - script: 'echo deploy'
      displayName: 'Command Line Script'